name: CI/CD Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Lint code
      run: npm run lint

    - name: 🏗️ Check Svelte
      run: npm run check

    - name: 🧪 Run unit tests
      run: npm test

    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml
        retention-days: 7

    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.node-version == 18
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: true

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏗️ Build application
      run: npm run build

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: build/
        retention-days: 7

  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build/

    - name: 🔗 Run integration tests
      run: npm run test:integration

    - name: 📊 Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: test-results/
        retention-days: 7

  e2e-test:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🎭 Install Playwright browsers
      run: npx playwright install --with-deps

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build/

    - name: 🎭 Run E2E tests
      run: npm run test:e2e

    - name: 📊 Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 7

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔒 Run security audit
      run: npm audit --audit-level=high

    - name: 🔍 Run dependency check
      run: npx audit-ci --high

  docker-build:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test, build]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Docker image
      run: docker build -t cicd-testing-pipeline-svelte .

    - name: 🧪 Test Docker image
      run: |
        docker run --rm cicd-testing-pipeline-svelte npm test
        docker run --rm cicd-testing-pipeline-svelte npm run build

    - name: 📊 Docker image scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'cicd-testing-pipeline-svelte'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  quality-gate:
    name: ✅ Quality Gate
    runs-on: ubuntu-latest
    needs: [test, integration-test, e2e-test, security-scan, docker-build]
    if: always()

    steps:
    - name: ✅ Check quality gate
      run: |
        if [[ "${{ needs.test.result }}" == "success" && 
              "${{ needs.integration-test.result }}" == "success" && 
              "${{ needs.e2e-test.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" && 
              "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "✅ All quality checks passed!"
          exit 0
        else
          echo "❌ Quality gate failed!"
          echo "Test result: ${{ needs.test.result }}"
          echo "Integration test result: ${{ needs.integration-test.result }}"
          echo "E2E test result: ${{ needs.e2e-test.result }}"
          echo "Security scan result: ${{ needs.security-scan.result }}"
          echo "Docker build result: ${{ needs.docker-build.result }}"
          exit 1
        fi

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build/

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📁 Build files ready for deployment"
        # Add your staging deployment commands here
        # For example: rsync, scp, or cloud deployment CLI

    - name: 🧪 Run staging smoke tests
      run: |
        echo "🧪 Running staging smoke tests..."
        # Add smoke tests for staging environment
        # curl checks, basic functionality tests, etc.

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build/

    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "📁 Build files ready for deployment"
        # Add your production deployment commands here

    - name: 🧪 Run production smoke tests
      run: |
        echo "🧪 Running production smoke tests..."
        # Add smoke tests for production environment

    - name: 📢 Notify deployment success
      run: |
        echo "📢 Production deployment successful!"
        # Add notification logic (Slack, email, etc.)

  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [quality-gate, deploy-staging, deploy-production]
    if: always()

    steps:
    - name: 📢 Notify on success
      if: needs.quality-gate.result == 'success'
      run: |
        echo "✅ CI/CD Pipeline completed successfully!"
        echo "🎉 All tests passed and quality gates met"

    - name: 📢 Notify on failure
      if: needs.quality-gate.result == 'failure'
      run: |
        echo "❌ CI/CD Pipeline failed!"
        echo "🔍 Check the logs for more details"